# emulate same behaviour as in Deckhouse Github registry
# when opened PRs will pushed to dev registry
DEV | Publish merge request:
  extends: .publish
  variables:
    MODULES_REGISTRY: ${DEV_MODULES_REGISTRY}
    MODULES_REGISTRY_PATH: ${DEV_MODULES_REGISTRY_PATH}
    MODULES_REGISTRY_LOGIN: ${DEV_MODULES_REGISTRY_LOGIN}
    MODULES_REGISTRY_PASSWORD: ${DEV_MODULES_REGISTRY_PASSWORD}
    # names as in Github: "pr" + merge request project-level ID instead of branch name
    MODULES_MODULE_TAG: pr${CI_MERGE_REQUEST_IID}
  rules:
    # do not run if some required variables is empty
    - if: '$DEV_MODULES_REGISTRY == null || $DEV_MODULES_REGISTRY == "" || $DEV_MODULES_REGISTRY_PATH == null || $DEV_MODULES_REGISTRY_PATH == ""'
      when: never
    # run only for merge requests
    - if: $CI_MERGE_REQUEST_IID && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME != $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "merge_request_event"
      when: on_success
    # run when new branch is created and there are no opened merge requests for this branch and no commits to this branch yet (completely new branch from master/main)
    # - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && ($CI_MERGE_REQUEST_IID == null || $CI_MERGE_REQUEST_IID == "") && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"
    #   when: on_success
    # do not run in other cases
    - when: never

DEV | Publish default branch:
  extends: .publish
  variables:
    MODULES_REGISTRY: ${DEV_MODULES_REGISTRY}
    MODULES_REGISTRY_PATH: ${DEV_MODULES_REGISTRY_PATH}
    MODULES_REGISTRY_LOGIN: ${DEV_MODULES_REGISTRY_LOGIN}
    MODULES_REGISTRY_PASSWORD: ${DEV_MODULES_REGISTRY_PASSWORD}
    MODULES_MODULE_TAG: ${CI_DEFAULT_BRANCH}
  rules:
    # do not run if some required variables is empty
    - if: '$DEV_MODULES_REGISTRY == null || $DEV_MODULES_REGISTRY == "" || $DEV_MODULES_REGISTRY_PATH == null || $DEV_MODULES_REGISTRY_PATH == ""'
      when: never
    # run only when push to default (main/master) branch
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    # do not run in other cases
    - when: never

DEV | Publish tags also to dev-registry:
  variables:
    MODULES_REGISTRY: ${DEV_MODULES_REGISTRY}
    MODULES_REGISTRY_PATH: ${DEV_MODULES_REGISTRY_PATH}
    MODULES_REGISTRY_LOGIN: ${DEV_MODULES_REGISTRY_LOGIN}
    MODULES_REGISTRY_PASSWORD: ${DEV_MODULES_REGISTRY_PASSWORD}
    MODULES_MODULE_TAG: ${CI_COMMIT_TAG}
  rules:
    # do not run if some required variables is empty
    - if: '$DEV_MODULES_REGISTRY == null || $DEV_MODULES_REGISTRY == "" || $DEV_MODULES_REGISTRY_PATH == null || $DEV_MODULES_REGISTRY_PATH == ""'
      when: never
    # deploy tags to dev-registry (as in prod registry) when tag specified
    - if: '$CI_COMMIT_TAG && ($NO_DEPLOY_TAGS_TO_DEV == null || $NO_DEPLOY_TAGS_TO_DEV == "")'
      when: on_success
    # do not run in other cases
    - when: never
  script:
    - |
      if [ "$DEBUG_CI" = "true" -o "$DEBUG_CI" = "1" ]; then
        printenv | sort
      fi
    # publish final images to dev registry and register module with $MODULES_MODULE_TAG
    - !reference [.publish, script]
