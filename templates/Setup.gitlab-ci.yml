# variables:
#   $MODULES_MODULE_SOURCE - base URL for the registry, e.g., registry.example.com/deckhouse/modules
#   $MODULES_MODULE_NAME (Optional) - module name, by default it is equal to the project name
#   $WERF_REPO - registry path, default ${MODULES_MODULE_SOURCE}/${MODULES_MODULE_NAME}
#   $DEV_MODULES_REGISTRY - dev registry path
#   $DEV_MODULES_REGISTRY_LOGIN - login to dev registry
#   $DEV_MODULES_REGISTRY_PASSWORD - password to dev registry
#   $PROD_MODULES_REGISTRY - prod registry path
#   $PROD_MODULES_REGISTRY_LOGIN - login to prod registry
#   $PROD_MODULES_REGISTRY_PASSWORD - password to prod registry
#   $SOURCE_REPO - Source repository address for the module
#   $SOURCE_REPO_SSH_KEY - SSH private key for the source repository
#   SVACE_ANALYZE_HOST - hostname of the svace analyze vm
#   SVACE_ANALYZE_SSH_USER: - ssh user to connect with to svace analyze vm
#   SVACE_ANALYZE_SSH_PRIVATE_KEY- svace analyze server ssh private key
#   MODULE_EDITION (Optional) - one of [ce,fe,be,ee,se,se-plus], only needed to allowance edition, if not set, allowance will be skipped.
#   ALLOWED_EDITIONS - must set like "ce fe be ee se se-plus" (with spaces), used to check MODULE_EDITION is allowed.

variables:
  MODULES_MODULE_NAME: "${CI_PROJECT_NAME}"
  MODULES_MODULE_TAG: ${CI_COMMIT_REF_NAME}
  BASE_IMAGES_VERSION: v0.5.8
  WERF_REPO: ${MODULES_MODULE_SOURCE}/${MODULES_MODULE_NAME}
  WERF_VERSION: "2 stable"

before_script:
  # Deny edition without allowance
  - |
    echo "=== Check edition is allowed ==="
    echo "ALLOWED_EDITIONS: ${ALLOWED_EDITIONS}"
    echo "MODULE_EDITION: ${MODULE_EDITION}"

    # "-n $MODULE_EDITION" needed to skip validations for dev build/deploy
    if [[ -n $MODULE_EDITION && ! " ${ALLOWED_EDITIONS[@]} " =~ " ${MODULE_EDITION} " ]]; then
      echo "Edition '${MODULE_EDITION}' is not allowed"
      exit 77
    fi
  # Setup tag
  - |
    echo "=== Setup tag ==="
    if [[ ${CI_COMMIT_REF_NAME} != "main" ]]; then
      export MODULES_MODULE_TAG=$(echo "${CI_COMMIT_REF_NAME}"|sed -e 's/\//-/g')
    fi
    echo "MODULES_MODULE_TAG: ${MODULES_MODULE_TAG}"
  # Setup trdl
  - |
    echo "=== Setup trdl ==="
    trdl_version=$(curl -s https://tuf.trdl.dev/targets/channels/0/stable)
    curl -sSLO "https://tuf.trdl.dev/targets/releases/$trdl_version/linux-amd64/bin/trdl"
    install -D trdl ~/bin/trdl
    rm trdl
    export PATH=$PATH:~/bin

  # Setup werf
  - |
    echo "=== Setup werf ==="
    trdl add werf https://tuf.werf.io 1 b7ff6bcbe598e072a86d595a3621924c8612c7e6dc6a82e919abe89707d7e3f468e616b5635630680dd1e98fc362ae5051728406700e6274c5ed1ad92bea52a2
    source $(trdl use werf ${WERF_VERSION:-1.2 stable})
    source $(werf ci-env gitlab --as-file)

    # Login to gitlab registry by default
    if [[ "x${MODULES_REGISTRY_LOGIN}" == "x" ]]; then
      MODULES_REGISTRY_LOGIN="${CI_REGISTRY_USER}"
    fi
    if [[ "x${MODULES_REGISTRY_PASSWORD}" == "x" ]]; then
      MODULES_REGISTRY_PASSWORD="${CI_REGISTRY_PASSWORD}"
    fi

  - | # old logic
    echo "=== Werf login ==="
    if [[ -n "${MODULES_REGISTRY_LOGIN}" && -n "${MODULES_REGISTRY_PASSWORD}" && -n "${MODULES_REGISTRY}" ]]; then
      echo "MODULES_REGISTRY_LOGIN: ${MODULES_REGISTRY_LOGIN}"
      echo "MODULES_REGISTRY: ${MODULES_REGISTRY}"
      werf cr login -u ${MODULES_REGISTRY_LOGIN} -p ${MODULES_REGISTRY_PASSWORD} ${MODULES_REGISTRY}
    fi

  - |
    echo "=== Werf prod login ==="
    if [[ -n "${PROD_MODULES_REGISTRY_LOGIN}" && -n "${PROD_MODULES_REGISTRY_PASSWORD}" && -n "${PROD_MODULES_REGISTRY}" ]]; then
      echo "PROD_MODULES_REGISTRY_LOGIN: ${PROD_MODULES_REGISTRY_LOGIN}"
      echo "PROD_MODULES_REGISTRY: ${PROD_MODULES_REGISTRY}"
      werf cr login -u ${PROD_MODULES_REGISTRY_LOGIN} -p ${PROD_MODULES_REGISTRY_PASSWORD} ${PROD_MODULES_REGISTRY}
    fi

  - |
    echo "=== Werf dev login ==="
    if [[ -n "${DEV_MODULES_REGISTRY_LOGIN}" && -n "${DEV_MODULES_REGISTRY_PASSWORD}" && -n "${DEV_MODULES_REGISTRY}" ]]; then
      echo "DEV_MODULES_REGISTRY_LOGIN: ${DEV_MODULES_REGISTRY_LOGIN}"
      echo "DEV_MODULES_REGISTRY: ${DEV_MODULES_REGISTRY}"
      werf cr login -u ${DEV_MODULES_REGISTRY_LOGIN} -p ${DEV_MODULES_REGISTRY_PASSWORD} ${DEV_MODULES_REGISTRY}
    fi

  # Setup dmt
  - |
    echo "=== Werf dmt ==="
    trdl add dmt https://trrr.flant.dev/trdl-dmt/ 3 e77d785600a8c8612b84b93a5a2e4c48188d68f7478356d0708213e928bf67b024ed412e702dc32930da5c5bfc9b1c44be3ee7a292f923327815c91c6c3c3833
    source $(trdl use dmt 0 stable)

  # Download base images yaml file
  - |
    echo "=== Download base images yaml file ==="
    echo "BASE_IMAGES_VERSION: ${BASE_IMAGES_VERSION}"
    curl --fail -sSLO https://fox.flant.com/api/v4/projects/deckhouse%2Fbase-images/packages/generic/base_images/${BASE_IMAGES_VERSION}/base_images.yml

  # Add ssh keys
  - |
    echo "=== Add ssh keys ==="
    if [[ -n "${SOURCE_REPO_SSH_KEY}" || -n "${SVACE_ANALYZE_SSH_PRIVATE_KEY}" ]]; then

      eval $(ssh-agent)
      trap "kill -3 ${SSH_AGENT_PID}" ERR EXIT HUP INT QUIT TERM
      export SSH_KNOWN_HOSTS=~/.ssh/known_hosts
      mkdir -p ~/.ssh
      touch ~/.ssh/known_hosts

      if [[ -n "${SOURCE_REPO_SSH_KEY}" ]]; then
        ssh-add - <<< "${SOURCE_REPO_SSH_KEY}"
        if [[ -n "${SOURCE_REPO}" ]]; then
          HOST=$(grep -oP '(?<=@)[^/:]+' <<< ${SOURCE_REPO})
          HOST_KEYS=$(ssh-keyscan -H "$HOST" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
            CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
            if ! grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
            fi
          done <<< "$HOST_KEYS"
        fi
      fi

      if [[ -n "${SVACE_ANALYZE_SSH_PRIVATE_KEY}" ]]; then
        ssh-add - <<< "${SVACE_ANALYZE_SSH_PRIVATE_KEY}"
        if [[ -n "${SVACE_ANALYZE_HOST}" ]]; then
          echo "Adding svace ssh key (ignoring errors)."
          set +e
          HOST=${SVACE_ANALYZE_HOST}
          HOST_KEYS=$(ssh-keyscan -H "$HOST" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
            CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
            if ! grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
            fi
          done <<< "$HOST_KEYS"
          set -e
        fi
      fi
    fi
  - echo "=== Setup completed ==="

stages:
  - build
  - deploy
