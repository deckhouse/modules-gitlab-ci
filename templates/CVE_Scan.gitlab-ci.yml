# variables:
#   $IMAGE - URL to a registry image, e.g., registry.example.com/deckhouse/modules/module_name
#   $TAG - module image tag
#   $MODULE_NAME - module name
#   $DD_URL - URL to defectDojo
#   $DD_TOKEN - token of defectDojo to upload reports
#   $PROD_REGISTRY - must be deckhouse prod read registry, used to get trivy databases and release images
#   $PROD_REGISTRY_USER - username to log in to deckhouse prod read registry
#   $PROD_REGISTRY_PASSWORD - password to log in to deckhouse prod read registry
#   $DEV_REGISTRY - must be deckhouse dev registry, used to get dev images
#   $DEV_REGISTRY_USER - username to log in to deckhouse dev registry
#   $DEV_REGISTRY_PASSWORD - password to log in to deckhouse dev registry
#   $TRIVY_REPORTS_LOG_OUTPUT - true/false. Output Trivy reports into CI job log, default - true
#   $SCAN_SEVERAL_LASTEST_RELEASES - true/false. Whether to scan last several releases or not. For scheduled pipelines override will not work as value is always true.
#   $LATEST_RELEASES_AMOUNT - Number of latest releases to scan. Default is: 3
#   $SEVERITY - Vulnerabilities severity to scan. Default is: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
#   $MODULE_PROD_REGISTRY_CUSTOM_PATH - Module custom path in prod registry. Example: flant/modules
#   $MODULE_DEV_REGISTRY_CUSTOM_PATH - Module custom path in dev registry. Example: flant/modules

.cve_scan:
  variables:
    TRIVY_BIN_VERSION: "v0.60.0"
    TRIVY_REPO_ID: "2181"
    TRIVY_DB_URL: "${PROD_REGISTRY}/deckhouse/ee/security/trivy-db:2"
    TRIVY_JAVA_DB_URL: "${PROD_REGISTRY}/deckhouse/ee/security/trivy-java-db:1"
    TRIVY_POLICY_URL: "${PROD_REGISTRY}/deckhouse/ee/security/trivy-bdu:1"
    IMAGES_DIGESTS_PATH: "/images_digests.json"
  script:
    # Creating workdir
    - |
      echo "Creating workdir"
      workdir="trivy_scan"
      # remove workdir in case it was not removed on previous run
      rm -rf "${workdir}"
      mkdir "${workdir}"
      echo
      echo "======================================================="
      echo
    # Login to registries
    - |
      echo ${PROD_REGISTRY_PASSWORD} | docker login --username="${PROD_REGISTRY_USER}" --password-stdin ${PROD_REGISTRY}
      echo ${DEV_REGISTRY_PASSWORD} | docker login --username="${DEV_REGISTRY_USER}" --password-stdin ${DEV_REGISTRY}
      echo
      echo "======================================================="
      echo
    # Get Trivy
    - |
      echo "Get Trivy"
      echo "Trivy version: ${TRIVY_BIN_VERSION}"
      echo "1"
      mkdir -p "${workdir}/bin/trivy-${TRIVY_BIN_VERSION}"
      echo "2"
      curl -s --fail-with-body ${CI_API_V4_URL}/projects/${TRIVY_REPO_ID}/packages/generic/trivy-${TRIVY_BIN_VERSION}/${TRIVY_BIN_VERSION}/trivy -o ${workdir}/bin/trivy-${TRIVY_BIN_VERSION}/trivy
      echo "3"
      chmod u+x ${workdir}/bin/trivy-${TRIVY_BIN_VERSION}/trivy
      echo "4"
      ln -s ${PWD}/${workdir}/bin/trivy-${TRIVY_BIN_VERSION}/trivy ${workdir}/bin/trivy

      echo "Updating Trivy Data Bases"
      mkdir -p "${workdir}/bin/trivy_cache"
      ${workdir}/bin/trivy image --download-db-only --db-repository "${TRIVY_DB_URL}" --cache-dir "${workdir}/bin/trivy_cache"
      ${workdir}/bin/trivy image --download-java-db-only --java-db-repository "${TRIVY_JAVA_DB_URL}" --cache-dir "${workdir}/bin/trivy_cache"
      echo
      echo "======================================================="
      echo

    # Run Trivy scan
    - |
      echo "Setting up registry path for module"
      PROD_REGISTRY_MODULE_BASEDIR="${${PROD_REGISTRY}/${MODULE_PROD_REGISTRY_CUSTOM_PATH}:-${PROD_REGISTRY}/deckhouse/fe/modules}"
      DEV_REGISTRY_MODULE_BASEDIR="${${DEV_REGISTRY}/${MODULE_DEV_REGISTRY_CUSTOM_PATH}:-${DEV_REGISTRY}/sys/deckhouse-oss/modules}"
      severity="${SEVERITY:-UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL}"
      latest_releases_amount="${LATEST_RELEASES_AMOUNT:-3}"
      # Do not use input var TAG if not merge request
      if [ "${CI_PIPELINE_SOURCE}" == "merge_request_event" ]; then
        module_tags=("${TAG}")
      else
        module_tags=("${CI_DEFAULT_BRANCH}")
      fi
      if [ "${CI_PIPELINE_SOURCE}" == "schedule" ]; then
        SCAN_SEVERAL_LASTEST_RELEASES="true"
      fi
      echo "Getting tags to scan"
      # Check if provided tag is a semver minor, and if so - get image from prod registry
      if echo "${TAG}" | grep -q "[0-9]*\.[0-9]*"; then
        module_tags=($(crane ls "${PROD_REGISTRY_MODULE_BASEDIR}/${MODULE_NAME}" | grep "^v${TAG}\.[0-9]*" | sort -V -r | head -n 1))
      fi
      if [ "${SCAN_SEVERAL_LASTEST_RELEASES}" == "true" ]; then
        # Get release tags by regexp, sort by sevmer desc, cut to get minor version, uniq and get several latest
        releases=($(crane ls "${PROD_REGISTRY_MODULE_BASEDIR}/${MODULE_NAME}" | grep "^v[0-9]*\.[0-9]*\.[0-9]*" | sort -V -r))
        latest_minor_releases=($(printf '%s\n' "${releases[@]}"| cut -d "." -f -2 | uniq | head -n ${latest_releases_amount}))
        for r in "${latest_minor_releases[@]}"; do
          module_tags+=($(printf '%s\n' "${releases[@]}" | grep "${r}" | sort -V -r|head -n 1))
        done
      fi
      echo "CVE Scan will be applied to the following tags of ${MODULE_NAME} module:"
      echo "${module_tags[@]}"
      # Scan in loop for provided list of tags
      for module_tag in ${module_tags[@]}; do
        dd_short_release_tag=""
        dd_full_release_tag=""
        dd_image_version="${module_tag}"
        module_image="${DEV_REGISTRY_MODULE_BASEDIR}/${MODULE_NAME}"
        # If we are scanning release images - we need to redefine image path to prod registry
        if echo "${module_tag}" | grep -q "^v[0-9]*\.[0-9]*\.[0-9]*" && [[ "${CI_PIPELINE_SOURCE}" != "merge_request_event" ]]; then
          module_image="${PROD_REGISTRY_MODULE_BASEDIR}/${MODULE_NAME}"
          dd_short_release_tag="release:$(echo ${module_tag} | cut -d '.' -f -2 | sed 's/^v//')"
          dd_full_release_tag="image_release_tag:${module_tag}"
          dd_image_version="$(echo ${dd_short_release_tag} | sed 's/^release\://')"
        fi
        module_workdir="${workdir}/${MODULE_NAME}_${module_tag}"
        module_reports="${module_workdir}/reports"
        mkdir -p "${module_reports}"
        touch ${module_workdir}/.trivyignore
        echo "Image to check: ${module_image}:${module_tag}"
        echo "Severity: ${severity}"
        echo "----------------------------------------------"
        echo ""
        echo "Getting module image"
        crane export "${module_image}:${module_tag}" "${MODULE_NAME}.tar"
        tar xf "${MODULE_NAME}.tar" -C "${module_workdir}/"
        echo "Preparing images list to scan"
        digests=$(cat "${module_workdir}${IMAGES_DIGESTS_PATH}")
        # Main module images to scan
        digests=$(echo "${digests}"|jq --arg i "${MODULE_NAME}" --arg s "${module_tag}" '. += { ($i): ($s) }')
        echo "Images to scan:"
        echo "${digests}"
        date_iso=$(date -I)
        while read -r line; do
          IMAGE_NAME=$(jq -rc '.key' <<< "${line}")
          if [[ "${IMAGE_NAME}" == "trivy" ]]; then
            continue
          fi
          # Set flag if additional image to use tag instead of hash
          additional_image_detected=false
          if [ "${IMAGE_NAME}" == "${MODULE_NAME}" ]; then
            additional_image_detected=true
          fi
          echo ""
          echo "----------------------------------------------"
          echo "ðŸ‘¾ Scaning image \"${IMAGE_NAME}\" of module \"${MODULE_NAME}\" for tag \"${module_tag}\""
          echo ""
          IMAGE_HASH="$(jq -rc '.value' <<< "${line}")"

          if [ "${additional_image_detected}" == true ]; then
            if [ "${TRIVY_REPORTS_LOG_OUTPUT}" != "false" ]; then
              ${workdir}/bin/trivy i --policy "${TRIVY_POLICY_URL}" --cache-dir "${workdir}/bin/trivy_cache" --skip-db-update --skip-java-db-update --exit-code 0 --severity ${severity} --ignorefile "${module_workdir}/.trivyignore" --format table --scanners vuln --quiet "${module_image}:${module_tag}"
            fi
            ${workdir}/bin/trivy i --policy "${TRIVY_POLICY_URL}" --cache-dir "${workdir}/bin/trivy_cache" --skip-db-update --skip-java-db-update --exit-code 0 --severity $severity --ignorefile "${module_workdir}/.trivyignore" --format json --scanners vuln --output "${module_reports}/d8_${MODULE_NAME}_${IMAGE_NAME}_report.json" --quiet "${module_image}:${module_tag}"
          else
            if [ "${TRIVY_REPORTS_LOG_OUTPUT}" != "false" ]; then
              ${workdir}/bin/trivy i --policy "${TRIVY_POLICY_URL}" --cache-dir "${workdir}/bin/trivy_cache" --skip-db-update --skip-java-db-update --exit-code 0 --severity ${severity} --ignorefile "${module_workdir}/.trivyignore" --format table --scanners vuln --quiet "${module_image}@${IMAGE_HASH}"
            fi
            ${workdir}/bin/trivy i --policy "${TRIVY_POLICY_URL}" --cache-dir "${workdir}/bin/trivy_cache" --skip-db-update --skip-java-db-update --exit-code 0 --severity ${severity} --ignorefile "${module_workdir}/.trivyignore" --format json --scanners vuln --output "${module_reports}/d8_${MODULE_NAME}_${IMAGE_NAME}_report.json" --quiet "${module_image}@${IMAGE_HASH}"
          fi
          echo "    Done"
          echo ""
          echo " Uploading trivy CVE report for image ${IMAGE_NAME} of ${MODULE_NAME} module"
          echo ""
          curl -s -S -o /dev/null --fail-with-body -X POST \
            --retry 5 \
            --retry-delay 10 \
            --retry-all-errors \
            ${DD_URL}/api/v2/reimport-scan/ \
            -H "accept: application/json" \
            -H "Content-Type: multipart/form-data"  \
            -H "Authorization: Token ${DD_TOKEN}" \
            -F "auto_create_context=True" \
            -F "minimum_severity=Info" \
            -F "active=true" \
            -F "verified=true" \
            -F "scan_type=Trivy Scan" \
            -F "close_old_findings=true" \
            -F "do_not_reactivate=false" \
            -F "push_to_jira=false" \
            -F "file=@${module_reports}/d8_${MODULE_NAME}_${IMAGE_NAME}_report.json" \
            -F "product_type_name=Deckhouse images" \
            -F "product_name=$MODULE_NAME" \
            -F "scan_date=${date_iso}" \
            -F "engagement_name=CVE Test: ${MODULE_NAME} Images" \
            -F "service=${MODULE_NAME} / ${IMAGE_NAME}" \
            -F "group_by=component_name+component_version" \
            -F "deduplication_on_engagement=false" \
            -F "tags=deckhouse_image,module:${MODULE_NAME},image:${IMAGE_NAME},branch:${module_tag},${dd_short_release_tag},${dd_full_release_tag}" \
            -F "test_title=[${MODULE_NAME}]: ${IMAGE_NAME}:${module_tag}" \
            -F "version=${dd_image_version}" \
            -F "build_id=${IMAGE_HASH}" \
            -F "commit_hash=${CI_COMMIT_SHA}" \
            -F "branch_tag=${module_tag}" \
            -F "apply_tags_to_findings=true"
        done < <(jq -rc 'to_entries[]' <<< "${digests}")
      done
      rm -rf ${workdir}
