inputs:
  target:
    description: 'Target build'
    type: string
  module_source:
    description: 'Registry repository address for of the module, e.g., registry.example.com/module-source'
    type: string
  module_name:
    description: 'Name of the module, e.g., my-module'
    type: string
  module_tag:
    description: 'The version of the module to deploy to release channel, e.g., v1.21.1'
    type: string
  secondary_repo:
    description: 'Secondary repository address for module, e.g., registry.example.com/module-source/module_name'
    type: string
    default: ""
  source_repo:
    description: "Source repository address for the module"
    type: string
    default: ""
  source_repo_ssh_key:
    description: "SSH private key for the source repository"
    type: string
    default: ""
  svace_analyze_host:
    description: 'fqdn address to the svace analyze vm'
    type: string
    default: ""
  svace_analyze_ssh_user:
    description: 'ssh user to connect with to svace analyze vm'
    type: string
    default: ""
  svace_analyze_ssh_key:
    description: "SSH private key for the svace analyze server"
    type: string
    default: ""
  svace_enabled:
    description: "Enable Svace analysis"
    value: "false"
    options:
      - "true"
      - "false"

.lint:
  stage: build
  script:
    - |
      dmt lint ./
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG
  allow_failure: true

"build_$[[ inputs.target ]]":
  stage: build
  variables:
    MODULE_SOURCE: $[[ inputs.module_source ]]
    MODULE_NAME: $[[ inputs.module_name ]]
    MODULE_TAG: $[[ inputs.module_tag ]]
    SECONDARY_REPO: $[[ inputs.secondary_repo ]]
    SOURCE_REPO: $[[ inputs.source_repo ]]
    SOURCE_REPO_SSH_KEY: $[[ inputs.source_repo_ssh_key ]]
    SVACE_ANALYZE_HOST: $[[ inputs.svace_analyze_host ]]
    SVACE_ANALYZE_SSH_USER: $[[ inputs.svace_analyze_ssh_user ]]
    SVACE_ANALYZE_SSH_KEY: $[[ inputs.svace_analyze_ssh_key ]]
    SVACE_ENABLED: $[[ inputs.svace_enabled ]]
  before_script:
    # Setup trdl
    - |
      trdl_version=$(curl -s https://tuf.trdl.dev/targets/channels/0/stable)
      curl -sSLO "https://tuf.trdl.dev/targets/releases/$trdl_version/linux-amd64/bin/trdl"
      install -D trdl ~/bin/trdl
      rm trdl
      export PATH=$PATH:~/bin

    # Setup werf
    - |
      trdl add werf https://tuf.werf.io 1 b7ff6bcbe598e072a86d595a3621924c8612c7e6dc6a82e919abe89707d7e3f468e616b5635630680dd1e98fc362ae5051728406700e6274c5ed1ad92bea52a2
      source $(trdl use werf ${WERF_VERSION:-1.2 stable})
      source $(werf ci-env gitlab --as-file)

      # Login to gitlab registry by default
      if [[ "x${MODULES_REGISTRY_LOGIN}" == "x" ]]; then
        MODULES_REGISTRY_LOGIN="${CI_REGISTRY_USER}"
      fi
      if [[ "x${MODULES_REGISTRY_PASSWORD}" == "x" ]]; then
        MODULES_REGISTRY_PASSWORD="${CI_REGISTRY_PASSWORD}"
      fi
      werf cr login -u ${MODULES_REGISTRY_LOGIN} -p ${MODULES_REGISTRY_PASSWORD} ${MODULES_REGISTRY}

      if [[ -n "${DEV_MODULES_REGISTRY_LOGIN}" && -n "${DEV_MODULES_REGISTRY_PASSWORD}" && -n "${DEV_MODULES_REGISTRY}" ]]; then
        werf cr login -u ${DEV_MODULES_REGISTRY_LOGIN} -p ${DEV_MODULES_REGISTRY_PASSWORD} ${DEV_MODULES_REGISTRY}
      fi
    # Setup dmt
    - |
      trdl add dmt https://trrr.flant.dev/trdl-dmt/ 3 e77d785600a8c8612b84b93a5a2e4c48188d68f7478356d0708213e928bf67b024ed412e702dc32930da5c5bfc9b1c44be3ee7a292f923327815c91c6c3c3833
      source $(trdl use dmt 0 stable)

    # Download base images yaml file
    - env | grep BASE_IMAGES_VERSION
    - curl --fail -sSLO https://fox.flant.com/api/v4/projects/deckhouse%2Fbase-images/packages/generic/base_images/${BASE_IMAGES_VERSION}/base_images.yml

    # Add ssh keys
    - |
      if [[ "${SOURCE_REPO_SSH_KEY}"  != '' || "${SOURCE_REPO_SSH_KEY}" != '' ]]; then
        eval $(ssh-agent)
        trap "kill -3 ${SSH_AGENT_PID}" ERR EXIT HUP INT QUIT TERM
        mkdir -p ~/.ssh
        touch ~/.ssh/known_hosts
        echo "New ssh agent pid: ${SSH_AGENT_PID}"
        echo "New ssh auth sock: ${SSH_AUTH_SOCK}"

      # Add to known_hosts
      - |
        [[ -z "${SOURCE_REPO}" ]] && exit 0
        HOST=$(grep -oP '(?<=@)[^/:]+' <<< ${SOURCE_REPO})
        HOST_KEYS=$(ssh-keyscan -H "$HOST" 2>/dev/null)
        while IFS= read -r KEY_LINE; do
          CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
          if ! grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
            echo "$KEY_LINE" >> ~/.ssh/known_hosts
          fi
        done <<< "$HOST_KEYS"

        [[ -z "${SVACE_ANALYZE_HOST}" ]] && exit 0
        echo "Adding svace ssh key (ignoring errors)."
        set +e
        HOST=${SVACE_ANALYZE_HOST}
        HOST_KEYS=$(ssh-keyscan -H "$HOST" 2>/dev/null)
        while IFS= read -r KEY_LINE; do
          CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
          if ! grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
            echo "$KEY_LINE" >> ~/.ssh/known_hosts
          fi
        done <<< "$HOST_KEYS"
        set -e
      fi

  script:
    # Build images
    - |
      if [[ -z "${DEV_MODULES_REGISTRY_LOGIN}" && -z "${DEV_MODULES_REGISTRY_PASSWORD}" && -z "${DEV_MODULES_REGISTRY}" ]]; then
        werf build \
          --save-build-report --build-report-path images_tags_werf.json
      else
        werf build \
          --repo=${MODULE_SOURCE}/${MODULE_NAME} \
          --save-build-report --build-report-path images_tags_werf.json
      werf build \
        --save-build-report --build-report-path images_tags_werf.json
    # Bundle image
    - |
      IMAGE_SRC="$(jq -r '.Images."bundle".DockerImageName' images_tags_werf.json)"
      IMAGE_DST="$(jq -r '.Images.bundle.DockerRepo' images_tags_werf.json):${MODULES_MODULE_TAG}"

      echo "✨ Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
      crane copy ${IMAGE_SRC} ${IMAGE_DST}
    # Release-channel image
    - |
      IMAGE_SRC="$(jq -r '.Images."release-channel-version".DockerImageName' images_tags_werf.json)"
      IMAGE_DST="$(jq -r '.Images."release-channel-version".DockerRepo' images_tags_werf.json)/release:${MODULES_MODULE_TAG}"

      echo "✨ Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
      crane copy ${IMAGE_SRC} ${IMAGE_DST}
    # Register module
    - |
      echo "✨ Register the module ${MODULE_NAME}"
      crane append \
        --oci-empty-base \
        --new_layer "" \
        --new_tag "${MODULE_SOURCE}:${MODULE_NAME}"

.svace_rules_mr:
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(^|,)analyze\/svace(,|$)/'
      variables:
        SVACE_ENABLED: "true"
.svace_rules_manual:
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $SVACE_ENABLED == "true" && $CI_COMMIT_BRANCH
      variables:
        SVACE_ENABLED: "true"
.svace_rules_schedule:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SVACE_ENABLED == "true" && $CI_COMMIT_BRANCH
      variables:
        SVACE_ENABLED: "true"