# variables:
#   $MODULES_MODULE_SOURCE - base URL for the registry, e.g., registry.example.com/deckhouse/modules
#   $MODULES_MODULE_NAME (Optional) - module name, by default it is equal to the project name
#   $WERF_REPO - registry path, default ${MODULES_MODULE_SOURCE}/${MODULES_MODULE_NAME}
#   SVACE_ANALYZE_HOST - hostname of the svace analyze vm
#   SVACE_ANALYZE_SSH_USER: - ssh user to connect with to svace analyze vm
#   SVACE_ANALYZE_SSH_PRIVATE_KEY- svace analyze server ssh private key
#
#   Variables for sign (inherited from Setup.gitlab-ci.yml):
#   WERF_SIGN_MANIFEST - enable image signing
#   WERF_BSIGN_ELF_FILES - enable binary signing
#   WERF_ANNOTATE_LAYERS_WITH_DM_VERITY_ROOT_HASH - add dm-verity hashes to layers
#   WERF_ELF_PGP_PRIVATE_KEY_FINGERPRINT - GPG key fingerprint
#   WERF_ELF_PGP_PRIVATE_KEY_PASSPHRASE - GPG key passphrase
#   VAULT_ADDR - Vault address
#   WERF_SIGN_CERT - certificate for signing images
#   WERF_SIGN_INTERMEDIATES - intermediate certificates
#   WERF_SIGN_KEY - private key for signing

variables:
  WERF_REPO:
    description: "Container registry storage address"
    value: ${MODULES_MODULE_SOURCE}/${MODULES_MODULE_NAME}
  SVACE_ENABLED:
    description: "Enable Svace analysis"
    value: "false"
    options:
      - "true"
      - "false"

.lint:
  stage: build
  script:
    - |
      dmt lint ./
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG
  allow_failure: true

.build:
  stage: build
  script:
    # Bundle image
    - |
      # Проверяем наличие ключей подписи
      if [[ "${WERF_SIGN_MANIFEST}" == "true" ]]; then
        if [[ -n "${WERF_SIGN_CERT}" && -n "${WERF_SIGN_KEY}" ]]; then
          echo "✅ Image signing is enabled and configured"
        else
          echo "❌ WARNING: Image signing is enabled but certificates are not configured"
        fi
      fi
      
      if [[ "${WERF_BSIGN_ELF_FILES}" == "1" ]]; then
        if [[ -n "${WERF_ELF_PGP_PRIVATE_KEY_FINGERPRINT}" ]]; then
          echo "✅ Binary signing is enabled and configured"
        else
          echo "❌ WARNING: Binary signing is enabled but GPG key is not configured"
        fi
      fi

    # Build images with signing support
    - |
      werf build \
        --save-build-report --build-report-path images_tags_werf.json

    # Bundle image
    - |
      IMAGE_SRC="$(jq -r '.Images."bundle".DockerImageName' images_tags_werf.json)"
      IMAGE_DST="$(jq -r '.Images.bundle.DockerRepo' images_tags_werf.json):${MODULES_MODULE_TAG}"

      echo "✨ Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
      crane copy ${IMAGE_SRC} ${IMAGE_DST}
    # Release-channel image
    - |
      IMAGE_SRC="$(jq -r '.Images."release-channel-version".DockerImageName' images_tags_werf.json)"
      IMAGE_DST="$(jq -r '.Images."release-channel-version".DockerRepo' images_tags_werf.json)/release:${MODULES_MODULE_TAG}"

      echo "✨ Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
      crane copy ${IMAGE_SRC} ${IMAGE_DST}
    # Register module
    - |
      echo "✨ Register the module ${MODULES_MODULE_NAME}"
      crane append \
        --oci-empty-base \
        --new_layer "" \
        --new_tag "${MODULES_MODULE_SOURCE}:${MODULES_MODULE_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

.svace_rules_mr:
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(^|,)analyze\/svace(,|$)/'
      variables:
        SVACE_ENABLED: "true"
.svace_rules_manual:
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $SVACE_ENABLED == "true" && $CI_COMMIT_BRANCH
      variables:
        SVACE_ENABLED: "true"
.svace_rules_schedule:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SVACE_ENABLED == "true" && $CI_COMMIT_BRANCH
      variables:
        SVACE_ENABLED: "true"