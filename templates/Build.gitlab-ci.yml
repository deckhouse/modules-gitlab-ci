# variables:
#   $MODULES_MODULE_SOURCE - base URL for the registry, e.g., registry.example.com/deckhouse/modules
#   $MODULES_MODULE_NAME (Optional) - module name, by default it is equal to the project name
#   $WERF_REPO - registry path, default ${MODULES_MODULE_SOURCE}/${MODULES_MODULE_NAME}

variables:
  SVACE_ENABLED:
    description: "Enable Svace analysis"
    value: "false"
    options:
      - "true"
      - "false"
#   SVACE_ANALYZE_HOST:
#     description: "hostname of the svace analyze vm"
#     value: "${SVACE_ANALYZE_HOST}"
#   SVACE_ANALYZE_SSH_USER:
#     description: "ssh user to connect with to svace analyze vm"
#     value: "${SVACE_ANALYZE_SSH_USER}"
#   SVACE_ANALYZE_SSH_PRIVATE_KEY:
#     description: "svace analyze server ssh private key"
#     value: "${SVACE_ANALYZE_SSH_PRIVATE_KEY}"

.lint:
  stage: build
  script:
    - |
      dmt lint ./
  only:
    - branches
    - tags
  allow_failure: true

.build:
  stage: build
  script:
    # Build images
    - |
      werf build \
        --save-build-report --build-report-path images_tags_werf.json
    # Bundle image
    - |
      IMAGE_SRC="$(jq -r '.Images."bundle".DockerImageName' images_tags_werf.json)"
      IMAGE_DST="$(jq -r '.Images.bundle.DockerRepo' images_tags_werf.json):${MODULES_MODULE_TAG}"

      echo "✨ Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
      crane copy ${IMAGE_SRC} ${IMAGE_DST}
    # Release-channel image
    - |
      IMAGE_SRC="$(jq -r '.Images."release-channel-version".DockerImageName' images_tags_werf.json)"
      IMAGE_DST="$(jq -r '.Images."release-channel-version".DockerRepo' images_tags_werf.json)/release:${MODULES_MODULE_TAG}"

      echo "✨ Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
      crane copy ${IMAGE_SRC} ${IMAGE_DST}
    # Register module
    - |
      echo "✨ Register the module ${MODULES_MODULE_NAME}"
      crane append \
        --oci-empty-base \
        --new_layer "" \
        --new_tag "${MODULES_MODULE_SOURCE}:${MODULES_MODULE_NAME}"
  only:
    - tags
    - branches

.svace_rules:
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(^|,)analyze\/svace(,|$)/'
      variables:
        SVACE_ENABLED: "true"
    - if: $CI_PIPELINE_SOURCE == "web" && $[[ inputs.SVACE_ENABLED ]] == "true"
      variables:
        SVACE_ENABLED: "true"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $[[ inputs.SVACE_ENABLED ]] == "true"
      variables:
        SVACE_ENABLED: "true"